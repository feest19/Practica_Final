// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Practica_Final.Infrastructure.Contexts;

namespace Practica_Final.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Practica_Final.Domain.Entities.CuentaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Monto")
                        .HasColumnType("REAL");

                    b.Property<int>("NumeroCuenta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoCuentaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoCuentaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CuentasBancarias");
                });

            modelBuilder.Entity("Practica_Final.Domain.Entities.TipoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoCuentas");
                });

            modelBuilder.Entity("Practica_Final.Domain.Entities.Transferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CuentaBancariaDestinatarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CuentaBancariaRemitenteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CuentaBancariaRemitentetarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<double>("Monto")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CuentaBancariaDestinatarioId");

                    b.HasIndex("CuentaBancariaRemitenteId");

                    b.ToTable("Transferencias");
                });

            modelBuilder.Entity("Practica_Final.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Practica_Final.Domain.Entities.CuentaBancaria", b =>
                {
                    b.HasOne("Practica_Final.Domain.Entities.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("TipoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Practica_Final.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoCuenta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Practica_Final.Domain.Entities.Transferencia", b =>
                {
                    b.HasOne("Practica_Final.Domain.Entities.CuentaBancaria", "CuentaBancariaDestinatario")
                        .WithMany()
                        .HasForeignKey("CuentaBancariaDestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Practica_Final.Domain.Entities.CuentaBancaria", "CuentaBancariaRemitente")
                        .WithMany()
                        .HasForeignKey("CuentaBancariaRemitenteId");

                    b.Navigation("CuentaBancariaDestinatario");

                    b.Navigation("CuentaBancariaRemitente");
                });
#pragma warning restore 612, 618
        }
    }
}
